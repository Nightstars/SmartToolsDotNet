/*
 * Files generated by SmartTools.Net Codeless
 * $GenDate$
 *
 */

using $Rootnamespace$.Data;
using $Rootnamespace$.Models;
using Longnows.Saas.Framework.Common.Entity;
using Longnows.Saas.Framework.Common.Attributes;
using Longnows.Saas.Framework.DB;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;

namespace $Rootnamespace$.Services
{
    [DI]
    public class $ModelName$Service: SimpleCrudService<$ModelName$,$ModelName$SearchDto>
    {

        #region initialize
        $sqls$
        #endregion

		#region GetExecutePage
		public override LayuiData<$ModelName$> GetExecutePage(PageData<$ModelName$> pageModel, $ModelName$SearchDto param)
		{
			var sql = GetExecutePageSql;

			/*string sqlCondition = $@" { param.GspParentComponentNo.IfNoNullExecAndLike("GSP_PARENT_COMPONENT_NO", "GspParentComponentNo")}
                                      { param.GspChildComponentNo.IfNoNullExecAndLike("GSP_CHILD_COMPONENT_NO", "GspChildComponentNo")}";
			*/

			string sqlCondition = $@"";
			return LayuiData<$ModelName$>.GetPageData(DBHelper.GetPageData<$ModelName$>(string.Format(sql, sqlCondition), pageModel, param));
		}
		#endregion

        #region GetDataReaderByIds
		/// <summary>
		/// GetDataReaderByIds
		/// </summary>
		/// <param name="keys">ID</param>
		/// <param name="site"></param>
		/// <returns></returns>
		public IDataReader GetDataReaderByIds(string[] keys, string site)
		{
			return DBHelper.ExecuteReader("SELECT * FROM $DBTable$ WHERE SEQ_NO In @SeqNos", new { SeqNos = keys.ToList()});
		}
		#endregion

		#region OnInsertting
		/// <summary>
		/// OnInsertting
		/// </summary>
		/// <param name="model"></param>
		/// <param name="result"></param>
		protected override void OnInsertting($ModelName$ model, CommonResult<string> result)
        {
			base.OnInsertting(model, result);
        }
		#endregion

		#region OnUpdatting
		/// <summary>
		/// OnUpdatting
		/// </summary>
		/// <param name="model"></param>
		/// <param name="result"></param>
		protected override void OnUpdatting($ModelName$ model, CommonResult<string> result)
        {
			base.OnUpdatting(model, result);
		}
		#endregion
    }
}
